// Mocks generated by Mockito 5.2.0 from annotations
// in base_auth/test/src/modules/login/domain/usecases/login/login_with_email_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:base_auth/src/modules/auth/infra/datasources/logged_user_datasource.dart'
    as _i3;
import 'package:base_auth/src/modules/login/domain/entities/login/login_with_email_entity.dart'
    as _i6;
import 'package:base_auth/src/modules/login/domain/entities/login/login_with_phone_entity.dart'
    as _i9;
import 'package:base_auth/src/modules/login/infra/datasources/login/local/local_login_with_email_datasource.dart'
    as _i5;
import 'package:base_auth/src/modules/login/infra/datasources/login/local/local_login_with_phone_datasource.dart'
    as _i8;
import 'package:base_auth/src/modules/login/infra/datasources/login/remote/remote_login_with_email_datasource.dart'
    as _i7;
import 'package:base_auth/src/modules/login/infra/datasources/login/remote/remote_login_with_phone_datasource.dart'
    as _i10;
import 'package:core/core.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [ILoggedUserDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockILoggedUserDatasource extends _i1.Mock
    implements _i3.ILoggedUserDatasource {
  MockILoggedUserDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i2.LoggedUserEntity>> getLoggedUser() =>
      (super
              .noSuchMethod(Invocation.method(#getLoggedUser, []),
                  returnValue:
                      Future<_i2.Either<Exception, _i2.LoggedUserEntity>>.value(
                          _FakeEither_0<Exception, _i2.LoggedUserEntity>()))
          as _i4.Future<_i2.Either<Exception, _i2.LoggedUserEntity>>);
  @override
  _i4.Future<_i2.Either<Exception, _i2.Unit>> removeLoggedUser() =>
      (super.noSuchMethod(Invocation.method(#removeLoggedUser, []),
              returnValue: Future<_i2.Either<Exception, _i2.Unit>>.value(
                  _FakeEither_0<Exception, _i2.Unit>()))
          as _i4.Future<_i2.Either<Exception, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<Exception, _i2.Unit>> saveLoggedUser(
          {_i2.LoggedUserEntity? user}) =>
      (super.noSuchMethod(Invocation.method(#saveLoggedUser, [], {#user: user}),
              returnValue: Future<_i2.Either<Exception, _i2.Unit>>.value(
                  _FakeEither_0<Exception, _i2.Unit>()))
          as _i4.Future<_i2.Either<Exception, _i2.Unit>>);
}

/// A class which mocks [ILocalLoginWithEmailDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalLoginWithEmailDatasource extends _i1.Mock
    implements _i5.ILocalLoginWithEmailDatasource {
  MockILocalLoginWithEmailDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i2.Unit>> call(
          {_i6.LoginWithEmailEntity? login}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#login: login}),
              returnValue: Future<_i2.Either<Exception, _i2.Unit>>.value(
                  _FakeEither_0<Exception, _i2.Unit>()))
          as _i4.Future<_i2.Either<Exception, _i2.Unit>>);
}

/// A class which mocks [IRemoteLoginWithEmailDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRemoteLoginWithEmailDatasource extends _i1.Mock
    implements _i7.IRemoteLoginWithEmailDatasource {
  MockIRemoteLoginWithEmailDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i2.Unit>> call(
          {_i6.LoginWithEmailEntity? login}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#login: login}),
              returnValue: Future<_i2.Either<Exception, _i2.Unit>>.value(
                  _FakeEither_0<Exception, _i2.Unit>()))
          as _i4.Future<_i2.Either<Exception, _i2.Unit>>);
}

/// A class which mocks [ILocalLoginWithPhoneDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalLoginWithPhoneDatasource extends _i1.Mock
    implements _i8.ILocalLoginWithPhoneDatasource {
  MockILocalLoginWithPhoneDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i2.Unit>> call(
          {_i9.LoginWithPhoneEntity? login}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#login: login}),
              returnValue: Future<_i2.Either<Exception, _i2.Unit>>.value(
                  _FakeEither_0<Exception, _i2.Unit>()))
          as _i4.Future<_i2.Either<Exception, _i2.Unit>>);
}

/// A class which mocks [IRemoteLoginWithPhoneDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRemoteLoginWithPhoneDatasource extends _i1.Mock
    implements _i10.IRemoteLoginWithPhoneDatasource {
  MockIRemoteLoginWithPhoneDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i2.Unit>> call(
          {_i9.LoginWithPhoneEntity? login}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#login: login}),
              returnValue: Future<_i2.Either<Exception, _i2.Unit>>.value(
                  _FakeEither_0<Exception, _i2.Unit>()))
          as _i4.Future<_i2.Either<Exception, _i2.Unit>>);
}

/// A class which mocks [IConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIConnectivityService extends _i1.Mock
    implements _i2.IConnectivityService {
  MockIConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i2.Unit>> isOnline() =>
      (super.noSuchMethod(Invocation.method(#isOnline, []),
              returnValue: Future<_i2.Either<Exception, _i2.Unit>>.value(
                  _FakeEither_0<Exception, _i2.Unit>()))
          as _i4.Future<_i2.Either<Exception, _i2.Unit>>);
}

/// A class which mocks [IConnectivityDriver].
///
/// See the documentation for Mockito's code generation for more information.
class MockIConnectivityDriver extends _i1.Mock
    implements _i2.IConnectivityDriver {
  MockIConnectivityDriver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isOnline =>
      (super.noSuchMethod(Invocation.getter(#isOnline),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
